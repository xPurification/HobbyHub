{"ast":null,"code":"import { add } from \"./add.mjs\";\nimport { differenceInDays } from \"./differenceInDays.mjs\";\nimport { differenceInHours } from \"./differenceInHours.mjs\";\nimport { differenceInMinutes } from \"./differenceInMinutes.mjs\";\nimport { differenceInMonths } from \"./differenceInMonths.mjs\";\nimport { differenceInSeconds } from \"./differenceInSeconds.mjs\";\nimport { differenceInYears } from \"./differenceInYears.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n/**\n * @name intervalToDuration\n * @category Common Helpers\n * @summary Convert interval to duration\n *\n * @description\n * Convert a interval object to a duration object.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param interval - The interval to convert to duration\n *\n * @returns The duration object\n *\n * @example\n * // Get the duration between January 15, 1929 and April 4, 1968.\n * intervalToDuration({\n *   start: new Date(1929, 0, 15, 12, 0, 0),\n *   end: new Date(1968, 3, 4, 19, 5, 0)\n * })\n * // => { years: 39, months: 2, days: 20, hours: 7, minutes: 5, seconds: 0 }\n */\n\nexport function intervalToDuration(interval) {\n  const start = toDate(interval.start);\n  const end = toDate(interval.end);\n  const duration = {};\n  const years = differenceInYears(end, start);\n  if (years) duration.years = years;\n  const remainingMonths = add(start, {\n    years: duration.years\n  });\n  const months = differenceInMonths(end, remainingMonths);\n  if (months) duration.months = months;\n  const remainingDays = add(remainingMonths, {\n    months: duration.months\n  });\n  const days = differenceInDays(end, remainingDays);\n  if (days) duration.days = days;\n  const remainingHours = add(remainingDays, {\n    days: duration.days\n  });\n  const hours = differenceInHours(end, remainingHours);\n  if (hours) duration.hours = hours;\n  const remainingMinutes = add(remainingHours, {\n    hours: duration.hours\n  });\n  const minutes = differenceInMinutes(end, remainingMinutes);\n  if (minutes) duration.minutes = minutes;\n  const remainingSeconds = add(remainingMinutes, {\n    minutes: duration.minutes\n  });\n  const seconds = differenceInSeconds(end, remainingSeconds);\n  if (seconds) duration.seconds = seconds;\n  return duration;\n} // Fallback for modularized imports:\n\nexport default intervalToDuration;","map":{"version":3,"names":["add","differenceInDays","differenceInHours","differenceInMinutes","differenceInMonths","differenceInSeconds","differenceInYears","toDate","intervalToDuration","interval","start","end","duration","years","remainingMonths","months","remainingDays","days","remainingHours","hours","remainingMinutes","minutes","remainingSeconds","seconds"],"sources":["C:/Users/devon/OneDrive/Documents/GitHub/final-project-xPurification/client/node_modules/date-fns/intervalToDuration.mjs"],"sourcesContent":["import { add } from \"./add.mjs\";\nimport { differenceInDays } from \"./differenceInDays.mjs\";\nimport { differenceInHours } from \"./differenceInHours.mjs\";\nimport { differenceInMinutes } from \"./differenceInMinutes.mjs\";\nimport { differenceInMonths } from \"./differenceInMonths.mjs\";\nimport { differenceInSeconds } from \"./differenceInSeconds.mjs\";\nimport { differenceInYears } from \"./differenceInYears.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name intervalToDuration\n * @category Common Helpers\n * @summary Convert interval to duration\n *\n * @description\n * Convert a interval object to a duration object.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param interval - The interval to convert to duration\n *\n * @returns The duration object\n *\n * @example\n * // Get the duration between January 15, 1929 and April 4, 1968.\n * intervalToDuration({\n *   start: new Date(1929, 0, 15, 12, 0, 0),\n *   end: new Date(1968, 3, 4, 19, 5, 0)\n * })\n * // => { years: 39, months: 2, days: 20, hours: 7, minutes: 5, seconds: 0 }\n */\nexport function intervalToDuration(interval) {\n  const start = toDate(interval.start);\n  const end = toDate(interval.end);\n\n  const duration = {};\n\n  const years = differenceInYears(end, start);\n  if (years) duration.years = years;\n\n  const remainingMonths = add(start, { years: duration.years });\n\n  const months = differenceInMonths(end, remainingMonths);\n  if (months) duration.months = months;\n\n  const remainingDays = add(remainingMonths, { months: duration.months });\n\n  const days = differenceInDays(end, remainingDays);\n  if (days) duration.days = days;\n\n  const remainingHours = add(remainingDays, { days: duration.days });\n\n  const hours = differenceInHours(end, remainingHours);\n  if (hours) duration.hours = hours;\n\n  const remainingMinutes = add(remainingHours, { hours: duration.hours });\n\n  const minutes = differenceInMinutes(end, remainingMinutes);\n  if (minutes) duration.minutes = minutes;\n\n  const remainingSeconds = add(remainingMinutes, { minutes: duration.minutes });\n\n  const seconds = differenceInSeconds(end, remainingSeconds);\n  if (seconds) duration.seconds = seconds;\n\n  return duration;\n}\n\n// Fallback for modularized imports:\nexport default intervalToDuration;\n"],"mappings":"AAAA,SAASA,GAAT,QAAoB,WAApB;AACA,SAASC,gBAAT,QAAiC,wBAAjC;AACA,SAASC,iBAAT,QAAkC,yBAAlC;AACA,SAASC,mBAAT,QAAoC,2BAApC;AACA,SAASC,kBAAT,QAAmC,0BAAnC;AACA,SAASC,mBAAT,QAAoC,2BAApC;AACA,SAASC,iBAAT,QAAkC,yBAAlC;AACA,SAASC,MAAT,QAAuB,cAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,kBAAT,CAA4BC,QAA5B,EAAsC;EAC3C,MAAMC,KAAK,GAAGH,MAAM,CAACE,QAAQ,CAACC,KAAV,CAApB;EACA,MAAMC,GAAG,GAAGJ,MAAM,CAACE,QAAQ,CAACE,GAAV,CAAlB;EAEA,MAAMC,QAAQ,GAAG,EAAjB;EAEA,MAAMC,KAAK,GAAGP,iBAAiB,CAACK,GAAD,EAAMD,KAAN,CAA/B;EACA,IAAIG,KAAJ,EAAWD,QAAQ,CAACC,KAAT,GAAiBA,KAAjB;EAEX,MAAMC,eAAe,GAAGd,GAAG,CAACU,KAAD,EAAQ;IAAEG,KAAK,EAAED,QAAQ,CAACC;EAAlB,CAAR,CAA3B;EAEA,MAAME,MAAM,GAAGX,kBAAkB,CAACO,GAAD,EAAMG,eAAN,CAAjC;EACA,IAAIC,MAAJ,EAAYH,QAAQ,CAACG,MAAT,GAAkBA,MAAlB;EAEZ,MAAMC,aAAa,GAAGhB,GAAG,CAACc,eAAD,EAAkB;IAAEC,MAAM,EAAEH,QAAQ,CAACG;EAAnB,CAAlB,CAAzB;EAEA,MAAME,IAAI,GAAGhB,gBAAgB,CAACU,GAAD,EAAMK,aAAN,CAA7B;EACA,IAAIC,IAAJ,EAAUL,QAAQ,CAACK,IAAT,GAAgBA,IAAhB;EAEV,MAAMC,cAAc,GAAGlB,GAAG,CAACgB,aAAD,EAAgB;IAAEC,IAAI,EAAEL,QAAQ,CAACK;EAAjB,CAAhB,CAA1B;EAEA,MAAME,KAAK,GAAGjB,iBAAiB,CAACS,GAAD,EAAMO,cAAN,CAA/B;EACA,IAAIC,KAAJ,EAAWP,QAAQ,CAACO,KAAT,GAAiBA,KAAjB;EAEX,MAAMC,gBAAgB,GAAGpB,GAAG,CAACkB,cAAD,EAAiB;IAAEC,KAAK,EAAEP,QAAQ,CAACO;EAAlB,CAAjB,CAA5B;EAEA,MAAME,OAAO,GAAGlB,mBAAmB,CAACQ,GAAD,EAAMS,gBAAN,CAAnC;EACA,IAAIC,OAAJ,EAAaT,QAAQ,CAACS,OAAT,GAAmBA,OAAnB;EAEb,MAAMC,gBAAgB,GAAGtB,GAAG,CAACoB,gBAAD,EAAmB;IAAEC,OAAO,EAAET,QAAQ,CAACS;EAApB,CAAnB,CAA5B;EAEA,MAAME,OAAO,GAAGlB,mBAAmB,CAACM,GAAD,EAAMW,gBAAN,CAAnC;EACA,IAAIC,OAAJ,EAAaX,QAAQ,CAACW,OAAT,GAAmBA,OAAnB;EAEb,OAAOX,QAAP;AACD,C,CAED;;AACA,eAAeJ,kBAAf"},"metadata":{},"sourceType":"module"}