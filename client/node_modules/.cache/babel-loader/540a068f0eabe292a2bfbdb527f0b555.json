{"ast":null,"code":"import { startOfMinute } from \"./startOfMinute.mjs\";\n/**\n * @name isSameMinute\n * @category Minute Helpers\n * @summary Are the given dates in the same minute (and hour and day)?\n *\n * @description\n * Are the given dates in the same minute (and hour and day)?\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The first date to check\n * @param dateRight - The second date to check\n *\n * @returns The dates are in the same minute (and hour and day)\n *\n * @example\n * // Are 4 September 2014 06:30:00 and 4 September 2014 06:30:15 in the same minute?\n * const result = isSameMinute(\n *   new Date(2014, 8, 4, 6, 30),\n *   new Date(2014, 8, 4, 6, 30, 15)\n * )\n * //=> true\n *\n * @example\n * // Are 4 September 2014 06:30:00 and 5 September 2014 06:30:00 in the same minute?\n * const result = isSameMinute(\n *   new Date(2014, 8, 4, 6, 30),\n *   new Date(2014, 8, 5, 6, 30)\n * )\n * //=> false\n */\n\nexport function isSameMinute(dateLeft, dateRight) {\n  const dateLeftStartOfMinute = startOfMinute(dateLeft);\n  const dateRightStartOfMinute = startOfMinute(dateRight);\n  return +dateLeftStartOfMinute === +dateRightStartOfMinute;\n} // Fallback for modularized imports:\n\nexport default isSameMinute;","map":{"version":3,"names":["startOfMinute","isSameMinute","dateLeft","dateRight","dateLeftStartOfMinute","dateRightStartOfMinute"],"sources":["C:/Users/devon/OneDrive/Documents/GitHub/final-project-xPurification/client/node_modules/date-fns/isSameMinute.mjs"],"sourcesContent":["import { startOfMinute } from \"./startOfMinute.mjs\";\n\n/**\n * @name isSameMinute\n * @category Minute Helpers\n * @summary Are the given dates in the same minute (and hour and day)?\n *\n * @description\n * Are the given dates in the same minute (and hour and day)?\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The first date to check\n * @param dateRight - The second date to check\n *\n * @returns The dates are in the same minute (and hour and day)\n *\n * @example\n * // Are 4 September 2014 06:30:00 and 4 September 2014 06:30:15 in the same minute?\n * const result = isSameMinute(\n *   new Date(2014, 8, 4, 6, 30),\n *   new Date(2014, 8, 4, 6, 30, 15)\n * )\n * //=> true\n *\n * @example\n * // Are 4 September 2014 06:30:00 and 5 September 2014 06:30:00 in the same minute?\n * const result = isSameMinute(\n *   new Date(2014, 8, 4, 6, 30),\n *   new Date(2014, 8, 5, 6, 30)\n * )\n * //=> false\n */\nexport function isSameMinute(dateLeft, dateRight) {\n  const dateLeftStartOfMinute = startOfMinute(dateLeft);\n  const dateRightStartOfMinute = startOfMinute(dateRight);\n\n  return +dateLeftStartOfMinute === +dateRightStartOfMinute;\n}\n\n// Fallback for modularized imports:\nexport default isSameMinute;\n"],"mappings":"AAAA,SAASA,aAAT,QAA8B,qBAA9B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,YAAT,CAAsBC,QAAtB,EAAgCC,SAAhC,EAA2C;EAChD,MAAMC,qBAAqB,GAAGJ,aAAa,CAACE,QAAD,CAA3C;EACA,MAAMG,sBAAsB,GAAGL,aAAa,CAACG,SAAD,CAA5C;EAEA,OAAO,CAACC,qBAAD,KAA2B,CAACC,sBAAnC;AACD,C,CAED;;AACA,eAAeJ,YAAf"},"metadata":{},"sourceType":"module"}