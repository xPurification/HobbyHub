{"ast":null,"code":"import { toDate } from \"./toDate.mjs\";\nimport { addLeadingZeros } from \"./_lib/addLeadingZeros.mjs\";\n/**\n * The {@link formatISO} function options.\n */\n\n/**\n * @name formatISO\n * @category Common Helpers\n * @summary Format the date according to the ISO 8601 standard (https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a003169814.htm).\n *\n * @description\n * Return the formatted date string in ISO 8601 format. Options may be passed to control the parts and notations of the date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param options - An object with options.\n *\n * @returns The formatted date string (in loca.l time zone)\n *\n * @throws `date` must not be Invalid Date\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format (local time zone is UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52))\n * //=> '2019-09-18T19:00:52Z'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601, short format (local time zone is UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })\n * //=> '20190918T190052'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format, date only:\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })\n * //=> '2019-09-18'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format, time only (local time zone is UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })\n * //=> '19:00:52Z'\n */\n\nexport function formatISO(date, options) {\n  const _date = toDate(date);\n\n  if (isNaN(_date.getTime())) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  const format = options?.format ?? \"extended\";\n  const representation = options?.representation ?? \"complete\";\n  let result = \"\";\n  let tzOffset = \"\";\n  const dateDelimiter = format === \"extended\" ? \"-\" : \"\";\n  const timeDelimiter = format === \"extended\" ? \":\" : \"\"; // Representation is either 'date' or 'complete'\n\n  if (representation !== \"time\") {\n    const day = addLeadingZeros(_date.getDate(), 2);\n    const month = addLeadingZeros(_date.getMonth() + 1, 2);\n    const year = addLeadingZeros(_date.getFullYear(), 4); // yyyyMMdd or yyyy-MM-dd.\n\n    result = `${year}${dateDelimiter}${month}${dateDelimiter}${day}`;\n  } // Representation is either 'time' or 'complete'\n\n\n  if (representation !== \"date\") {\n    // Add the timezone.\n    const offset = _date.getTimezoneOffset();\n\n    if (offset !== 0) {\n      const absoluteOffset = Math.abs(offset);\n      const hourOffset = addLeadingZeros(Math.trunc(absoluteOffset / 60), 2);\n      const minuteOffset = addLeadingZeros(absoluteOffset % 60, 2); // If less than 0, the sign is +, because it is ahead of time.\n\n      const sign = offset < 0 ? \"+\" : \"-\";\n      tzOffset = `${sign}${hourOffset}:${minuteOffset}`;\n    } else {\n      tzOffset = \"Z\";\n    }\n\n    const hour = addLeadingZeros(_date.getHours(), 2);\n    const minute = addLeadingZeros(_date.getMinutes(), 2);\n    const second = addLeadingZeros(_date.getSeconds(), 2); // If there's also date, separate it with time with 'T'\n\n    const separator = result === \"\" ? \"\" : \"T\"; // Creates a time string consisting of hour, minute, and second, separated by delimiters, if defined.\n\n    const time = [hour, minute, second].join(timeDelimiter); // HHmmss or HH:mm:ss.\n\n    result = `${result}${separator}${time}${tzOffset}`;\n  }\n\n  return result;\n} // Fallback for modularized imports:\n\nexport default formatISO;","map":{"version":3,"names":["toDate","addLeadingZeros","formatISO","date","options","_date","isNaN","getTime","RangeError","format","representation","result","tzOffset","dateDelimiter","timeDelimiter","day","getDate","month","getMonth","year","getFullYear","offset","getTimezoneOffset","absoluteOffset","Math","abs","hourOffset","trunc","minuteOffset","sign","hour","getHours","minute","getMinutes","second","getSeconds","separator","time","join"],"sources":["C:/Users/devon/OneDrive/Documents/GitHub/final-project-xPurification/client/node_modules/date-fns/formatISO.mjs"],"sourcesContent":["import { toDate } from \"./toDate.mjs\";\nimport { addLeadingZeros } from \"./_lib/addLeadingZeros.mjs\";\n\n/**\n * The {@link formatISO} function options.\n */\n\n/**\n * @name formatISO\n * @category Common Helpers\n * @summary Format the date according to the ISO 8601 standard (https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a003169814.htm).\n *\n * @description\n * Return the formatted date string in ISO 8601 format. Options may be passed to control the parts and notations of the date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param options - An object with options.\n *\n * @returns The formatted date string (in loca.l time zone)\n *\n * @throws `date` must not be Invalid Date\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format (local time zone is UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52))\n * //=> '2019-09-18T19:00:52Z'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601, short format (local time zone is UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })\n * //=> '20190918T190052'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format, date only:\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })\n * //=> '2019-09-18'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format, time only (local time zone is UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })\n * //=> '19:00:52Z'\n */\nexport function formatISO(date, options) {\n  const _date = toDate(date);\n\n  if (isNaN(_date.getTime())) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  const format = options?.format ?? \"extended\";\n  const representation = options?.representation ?? \"complete\";\n\n  let result = \"\";\n  let tzOffset = \"\";\n\n  const dateDelimiter = format === \"extended\" ? \"-\" : \"\";\n  const timeDelimiter = format === \"extended\" ? \":\" : \"\";\n\n  // Representation is either 'date' or 'complete'\n  if (representation !== \"time\") {\n    const day = addLeadingZeros(_date.getDate(), 2);\n    const month = addLeadingZeros(_date.getMonth() + 1, 2);\n    const year = addLeadingZeros(_date.getFullYear(), 4);\n\n    // yyyyMMdd or yyyy-MM-dd.\n    result = `${year}${dateDelimiter}${month}${dateDelimiter}${day}`;\n  }\n\n  // Representation is either 'time' or 'complete'\n  if (representation !== \"date\") {\n    // Add the timezone.\n    const offset = _date.getTimezoneOffset();\n\n    if (offset !== 0) {\n      const absoluteOffset = Math.abs(offset);\n      const hourOffset = addLeadingZeros(Math.trunc(absoluteOffset / 60), 2);\n      const minuteOffset = addLeadingZeros(absoluteOffset % 60, 2);\n      // If less than 0, the sign is +, because it is ahead of time.\n      const sign = offset < 0 ? \"+\" : \"-\";\n\n      tzOffset = `${sign}${hourOffset}:${minuteOffset}`;\n    } else {\n      tzOffset = \"Z\";\n    }\n\n    const hour = addLeadingZeros(_date.getHours(), 2);\n    const minute = addLeadingZeros(_date.getMinutes(), 2);\n    const second = addLeadingZeros(_date.getSeconds(), 2);\n\n    // If there's also date, separate it with time with 'T'\n    const separator = result === \"\" ? \"\" : \"T\";\n\n    // Creates a time string consisting of hour, minute, and second, separated by delimiters, if defined.\n    const time = [hour, minute, second].join(timeDelimiter);\n\n    // HHmmss or HH:mm:ss.\n    result = `${result}${separator}${time}${tzOffset}`;\n  }\n\n  return result;\n}\n\n// Fallback for modularized imports:\nexport default formatISO;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}