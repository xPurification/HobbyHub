{"ast":null,"code":"import { defaultLocale } from \"./_lib/defaultLocale.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\nimport { getRoundingMethod } from \"./_lib/getRoundingMethod.mjs\";\nimport { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.mjs\";\nimport { compareAsc } from \"./compareAsc.mjs\";\nimport { millisecondsInMinute, minutesInDay, minutesInMonth, minutesInYear } from \"./constants.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n/**\n * The {@link formatDistanceStrict} function options.\n */\n\n/**\n * The unit used to format the distance in {@link formatDistanceStrict}.\n */\n\n/**\n * @name formatDistanceStrict\n * @category Common Helpers\n * @summary Return the distance between the given dates in words.\n *\n * @description\n * Return the distance between the given dates in words, using strict units.\n * This is like `formatDistance`, but does not use helpers like 'almost', 'over',\n * 'less than' and the like.\n *\n * | Distance between dates | Result              |\n * |------------------------|---------------------|\n * | 0 ... 59 secs          | [0..59] seconds     |\n * | 1 ... 59 mins          | [1..59] minutes     |\n * | 1 ... 23 hrs           | [1..23] hours       |\n * | 1 ... 29 days          | [1..29] days        |\n * | 1 ... 11 months        | [1..11] months      |\n * | 1 ... N years          | [1..N]  years       |\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date\n * @param baseDate - The date to compare with\n * @param options - An object with options\n *\n * @returns The distance in words\n *\n * @throws `date` must not be Invalid Date\n * @throws `baseDate` must not be Invalid Date\n * @throws `options.unit` must be 'second', 'minute', 'hour', 'day', 'month' or 'year'\n * @throws `options.locale` must contain `formatDistance` property\n *\n * @example\n * // What is the distance between 2 July 2014 and 1 January 2015?\n * const result = formatDistanceStrict(new Date(2014, 6, 2), new Date(2015, 0, 2))\n * //=> '6 months'\n *\n * @example\n * // What is the distance between 1 January 2015 00:00:15\n * // and 1 January 2015 00:00:00?\n * const result = formatDistanceStrict(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   new Date(2015, 0, 1, 0, 0, 0)\n * )\n * //=> '15 seconds'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, with a suffix?\n * const result = formatDistanceStrict(new Date(2015, 0, 1), new Date(2016, 0, 1), {\n *   addSuffix: true\n * })\n * //=> '1 year ago'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, in minutes?\n * const result = formatDistanceStrict(new Date(2016, 0, 1), new Date(2015, 0, 1), {\n *   unit: 'minute'\n * })\n * //=> '525600 minutes'\n *\n * @example\n * // What is the distance from 1 January 2015\n * // to 28 January 2015, in months, rounded up?\n * const result = formatDistanceStrict(new Date(2015, 0, 28), new Date(2015, 0, 1), {\n *   unit: 'month',\n *   roundingMethod: 'ceil'\n * })\n * //=> '1 month'\n *\n * @example\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = formatDistanceStrict(new Date(2016, 7, 1), new Date(2015, 0, 1), {\n *   locale: eoLocale\n * })\n * //=> '1 jaro'\n */\n\nexport function formatDistanceStrict(date, baseDate, options) {\n  const defaultOptions = getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;\n  const comparison = compareAsc(date, baseDate);\n\n  if (isNaN(comparison)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  const localizeOptions = Object.assign({}, options, {\n    addSuffix: options?.addSuffix,\n    comparison: comparison\n  });\n  let dateLeft;\n  let dateRight;\n\n  if (comparison > 0) {\n    dateLeft = toDate(baseDate);\n    dateRight = toDate(date);\n  } else {\n    dateLeft = toDate(date);\n    dateRight = toDate(baseDate);\n  }\n\n  const roundingMethod = getRoundingMethod(options?.roundingMethod ?? \"round\");\n  const milliseconds = dateRight.getTime() - dateLeft.getTime();\n  const minutes = milliseconds / millisecondsInMinute;\n  const timezoneOffset = getTimezoneOffsetInMilliseconds(dateRight) - getTimezoneOffsetInMilliseconds(dateLeft); // Use DST-normalized difference in minutes for years, months and days;\n  // use regular difference in minutes for hours, minutes and seconds.\n\n  const dstNormalizedMinutes = (milliseconds - timezoneOffset) / millisecondsInMinute;\n  const defaultUnit = options?.unit;\n  let unit;\n\n  if (!defaultUnit) {\n    if (minutes < 1) {\n      unit = \"second\";\n    } else if (minutes < 60) {\n      unit = \"minute\";\n    } else if (minutes < minutesInDay) {\n      unit = \"hour\";\n    } else if (dstNormalizedMinutes < minutesInMonth) {\n      unit = \"day\";\n    } else if (dstNormalizedMinutes < minutesInYear) {\n      unit = \"month\";\n    } else {\n      unit = \"year\";\n    }\n  } else {\n    unit = defaultUnit;\n  } // 0 up to 60 seconds\n\n\n  if (unit === \"second\") {\n    const seconds = roundingMethod(milliseconds / 1000);\n    return locale.formatDistance(\"xSeconds\", seconds, localizeOptions); // 1 up to 60 mins\n  } else if (unit === \"minute\") {\n    const roundedMinutes = roundingMethod(minutes);\n    return locale.formatDistance(\"xMinutes\", roundedMinutes, localizeOptions); // 1 up to 24 hours\n  } else if (unit === \"hour\") {\n    const hours = roundingMethod(minutes / 60);\n    return locale.formatDistance(\"xHours\", hours, localizeOptions); // 1 up to 30 days\n  } else if (unit === \"day\") {\n    const days = roundingMethod(dstNormalizedMinutes / minutesInDay);\n    return locale.formatDistance(\"xDays\", days, localizeOptions); // 1 up to 12 months\n  } else if (unit === \"month\") {\n    const months = roundingMethod(dstNormalizedMinutes / minutesInMonth);\n    return months === 12 && defaultUnit !== \"month\" ? locale.formatDistance(\"xYears\", 1, localizeOptions) : locale.formatDistance(\"xMonths\", months, localizeOptions); // 1 year up to max Date\n  } else {\n    const years = roundingMethod(dstNormalizedMinutes / minutesInYear);\n    return locale.formatDistance(\"xYears\", years, localizeOptions);\n  }\n} // Fallback for modularized imports:\n\nexport default formatDistanceStrict;","map":{"version":3,"names":["defaultLocale","getDefaultOptions","getRoundingMethod","getTimezoneOffsetInMilliseconds","compareAsc","millisecondsInMinute","minutesInDay","minutesInMonth","minutesInYear","toDate","formatDistanceStrict","date","baseDate","options","defaultOptions","locale","comparison","isNaN","RangeError","localizeOptions","Object","assign","addSuffix","dateLeft","dateRight","roundingMethod","milliseconds","getTime","minutes","timezoneOffset","dstNormalizedMinutes","defaultUnit","unit","seconds","formatDistance","roundedMinutes","hours","days","months","years"],"sources":["C:/Users/devon/OneDrive/Documents/GitHub/final-project-xPurification/client/node_modules/date-fns/formatDistanceStrict.mjs"],"sourcesContent":["import { defaultLocale } from \"./_lib/defaultLocale.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\nimport { getRoundingMethod } from \"./_lib/getRoundingMethod.mjs\";\nimport { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.mjs\";\nimport { compareAsc } from \"./compareAsc.mjs\";\nimport {\n  millisecondsInMinute,\n  minutesInDay,\n  minutesInMonth,\n  minutesInYear,\n} from \"./constants.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * The {@link formatDistanceStrict} function options.\n */\n\n/**\n * The unit used to format the distance in {@link formatDistanceStrict}.\n */\n\n/**\n * @name formatDistanceStrict\n * @category Common Helpers\n * @summary Return the distance between the given dates in words.\n *\n * @description\n * Return the distance between the given dates in words, using strict units.\n * This is like `formatDistance`, but does not use helpers like 'almost', 'over',\n * 'less than' and the like.\n *\n * | Distance between dates | Result              |\n * |------------------------|---------------------|\n * | 0 ... 59 secs          | [0..59] seconds     |\n * | 1 ... 59 mins          | [1..59] minutes     |\n * | 1 ... 23 hrs           | [1..23] hours       |\n * | 1 ... 29 days          | [1..29] days        |\n * | 1 ... 11 months        | [1..11] months      |\n * | 1 ... N years          | [1..N]  years       |\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date\n * @param baseDate - The date to compare with\n * @param options - An object with options\n *\n * @returns The distance in words\n *\n * @throws `date` must not be Invalid Date\n * @throws `baseDate` must not be Invalid Date\n * @throws `options.unit` must be 'second', 'minute', 'hour', 'day', 'month' or 'year'\n * @throws `options.locale` must contain `formatDistance` property\n *\n * @example\n * // What is the distance between 2 July 2014 and 1 January 2015?\n * const result = formatDistanceStrict(new Date(2014, 6, 2), new Date(2015, 0, 2))\n * //=> '6 months'\n *\n * @example\n * // What is the distance between 1 January 2015 00:00:15\n * // and 1 January 2015 00:00:00?\n * const result = formatDistanceStrict(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   new Date(2015, 0, 1, 0, 0, 0)\n * )\n * //=> '15 seconds'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, with a suffix?\n * const result = formatDistanceStrict(new Date(2015, 0, 1), new Date(2016, 0, 1), {\n *   addSuffix: true\n * })\n * //=> '1 year ago'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, in minutes?\n * const result = formatDistanceStrict(new Date(2016, 0, 1), new Date(2015, 0, 1), {\n *   unit: 'minute'\n * })\n * //=> '525600 minutes'\n *\n * @example\n * // What is the distance from 1 January 2015\n * // to 28 January 2015, in months, rounded up?\n * const result = formatDistanceStrict(new Date(2015, 0, 28), new Date(2015, 0, 1), {\n *   unit: 'month',\n *   roundingMethod: 'ceil'\n * })\n * //=> '1 month'\n *\n * @example\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = formatDistanceStrict(new Date(2016, 7, 1), new Date(2015, 0, 1), {\n *   locale: eoLocale\n * })\n * //=> '1 jaro'\n */\n\nexport function formatDistanceStrict(date, baseDate, options) {\n  const defaultOptions = getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;\n\n  const comparison = compareAsc(date, baseDate);\n\n  if (isNaN(comparison)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  const localizeOptions = Object.assign({}, options, {\n    addSuffix: options?.addSuffix,\n    comparison: comparison,\n  });\n\n  let dateLeft;\n  let dateRight;\n  if (comparison > 0) {\n    dateLeft = toDate(baseDate);\n    dateRight = toDate(date);\n  } else {\n    dateLeft = toDate(date);\n    dateRight = toDate(baseDate);\n  }\n\n  const roundingMethod = getRoundingMethod(options?.roundingMethod ?? \"round\");\n\n  const milliseconds = dateRight.getTime() - dateLeft.getTime();\n  const minutes = milliseconds / millisecondsInMinute;\n\n  const timezoneOffset =\n    getTimezoneOffsetInMilliseconds(dateRight) -\n    getTimezoneOffsetInMilliseconds(dateLeft);\n\n  // Use DST-normalized difference in minutes for years, months and days;\n  // use regular difference in minutes for hours, minutes and seconds.\n  const dstNormalizedMinutes =\n    (milliseconds - timezoneOffset) / millisecondsInMinute;\n\n  const defaultUnit = options?.unit;\n  let unit;\n  if (!defaultUnit) {\n    if (minutes < 1) {\n      unit = \"second\";\n    } else if (minutes < 60) {\n      unit = \"minute\";\n    } else if (minutes < minutesInDay) {\n      unit = \"hour\";\n    } else if (dstNormalizedMinutes < minutesInMonth) {\n      unit = \"day\";\n    } else if (dstNormalizedMinutes < minutesInYear) {\n      unit = \"month\";\n    } else {\n      unit = \"year\";\n    }\n  } else {\n    unit = defaultUnit;\n  }\n\n  // 0 up to 60 seconds\n  if (unit === \"second\") {\n    const seconds = roundingMethod(milliseconds / 1000);\n    return locale.formatDistance(\"xSeconds\", seconds, localizeOptions);\n\n    // 1 up to 60 mins\n  } else if (unit === \"minute\") {\n    const roundedMinutes = roundingMethod(minutes);\n    return locale.formatDistance(\"xMinutes\", roundedMinutes, localizeOptions);\n\n    // 1 up to 24 hours\n  } else if (unit === \"hour\") {\n    const hours = roundingMethod(minutes / 60);\n    return locale.formatDistance(\"xHours\", hours, localizeOptions);\n\n    // 1 up to 30 days\n  } else if (unit === \"day\") {\n    const days = roundingMethod(dstNormalizedMinutes / minutesInDay);\n    return locale.formatDistance(\"xDays\", days, localizeOptions);\n\n    // 1 up to 12 months\n  } else if (unit === \"month\") {\n    const months = roundingMethod(dstNormalizedMinutes / minutesInMonth);\n    return months === 12 && defaultUnit !== \"month\"\n      ? locale.formatDistance(\"xYears\", 1, localizeOptions)\n      : locale.formatDistance(\"xMonths\", months, localizeOptions);\n\n    // 1 year up to max Date\n  } else {\n    const years = roundingMethod(dstNormalizedMinutes / minutesInYear);\n    return locale.formatDistance(\"xYears\", years, localizeOptions);\n  }\n}\n\n// Fallback for modularized imports:\nexport default formatDistanceStrict;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}