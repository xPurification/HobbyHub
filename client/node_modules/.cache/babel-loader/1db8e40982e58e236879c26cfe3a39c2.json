{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\devon\\\\OneDrive\\\\Documents\\\\GitHub\\\\final-project-xPurification\\\\client\\\\src\\\\pages\\\\ReadPosts.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Card from './Card';\nimport { supabase } from '../client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ReadPosts = () => {\n  _s();\n\n  const [posts, setPosts] = useState([]);\n  useEffect(() => {\n    fetchPosts();\n  }, []);\n\n  const fetchPosts = async () => {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('Posts').select('*');\n\n      if (error) {\n        throw error;\n      }\n\n      setPosts(data);\n    } catch (error) {\n      console.error('Error fetching posts:', error.message);\n    }\n  };\n\n  const handlePostEdit = async updatedPost => {\n    // Find the index of the updated post in the posts array\n    const index = posts.findIndex(post => post.id === updatedPost.id);\n\n    if (index !== -1) {\n      // Update the posts array with the updated post\n      const updatedPosts = [...posts];\n      updatedPosts[index] = updatedPost;\n      setPosts(updatedPosts);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ReadPosts\",\n    children: posts.map(post => /*#__PURE__*/_jsxDEV(Card, {\n      id: post.id,\n      title: post.title,\n      created_at: post.created_at,\n      upvotes: post.upvotes,\n      onPostEdit: handlePostEdit // Pass the handlePostEdit function as a prop\n\n    }, post.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ReadPosts, \"bG8V4duoIfO0BEPgauWMVT5Qvyw=\");\n\n_c = ReadPosts;\nexport default ReadPosts;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReadPosts\");","map":{"version":3,"names":["React","useState","useEffect","Card","supabase","ReadPosts","posts","setPosts","fetchPosts","data","error","from","select","console","message","handlePostEdit","updatedPost","index","findIndex","post","id","updatedPosts","map","title","created_at","upvotes"],"sources":["C:/Users/devon/OneDrive/Documents/GitHub/final-project-xPurification/client/src/pages/ReadPosts.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Card from './Card';\nimport { supabase } from '../client';\n\nconst ReadPosts = () => {\n  const [posts, setPosts] = useState([]);\n\n  useEffect(() => {\n    fetchPosts();\n  }, []);\n\n  const fetchPosts = async () => {\n    try {\n      const { data, error } = await supabase\n        .from('Posts')\n        .select('*');\n      \n      if (error) {\n        throw error;\n      }\n      \n      setPosts(data);\n    } catch (error) {\n      console.error('Error fetching posts:', error.message);\n    }\n  };\n\n  const handlePostEdit = async (updatedPost) => {\n    // Find the index of the updated post in the posts array\n    const index = posts.findIndex(post => post.id === updatedPost.id);\n    \n    if (index !== -1) {\n      // Update the posts array with the updated post\n      const updatedPosts = [...posts];\n      updatedPosts[index] = updatedPost;\n      setPosts(updatedPosts);\n    }\n  };\n\n  return (\n    <div className=\"ReadPosts\">\n      {posts.map(post => (\n        <Card\n          key={post.id}\n          id={post.id}\n          title={post.title}\n          created_at={post.created_at}\n          upvotes={post.upvotes}\n          onPostEdit={handlePostEdit} // Pass the handlePostEdit function as a prop\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default ReadPosts;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,QAAT,QAAyB,WAAzB;;;AAEA,MAAMC,SAAS,GAAG,MAAM;EAAA;;EACtB,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAlC;EAEAC,SAAS,CAAC,MAAM;IACdM,UAAU;EACX,CAFQ,EAEN,EAFM,CAAT;;EAIA,MAAMA,UAAU,GAAG,YAAY;IAC7B,IAAI;MACF,MAAM;QAAEC,IAAF;QAAQC;MAAR,IAAkB,MAAMN,QAAQ,CACnCO,IAD2B,CACtB,OADsB,EAE3BC,MAF2B,CAEpB,GAFoB,CAA9B;;MAIA,IAAIF,KAAJ,EAAW;QACT,MAAMA,KAAN;MACD;;MAEDH,QAAQ,CAACE,IAAD,CAAR;IACD,CAVD,CAUE,OAAOC,KAAP,EAAc;MACdG,OAAO,CAACH,KAAR,CAAc,uBAAd,EAAuCA,KAAK,CAACI,OAA7C;IACD;EACF,CAdD;;EAgBA,MAAMC,cAAc,GAAG,MAAOC,WAAP,IAAuB;IAC5C;IACA,MAAMC,KAAK,GAAGX,KAAK,CAACY,SAAN,CAAgBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYJ,WAAW,CAACI,EAAhD,CAAd;;IAEA,IAAIH,KAAK,KAAK,CAAC,CAAf,EAAkB;MAChB;MACA,MAAMI,YAAY,GAAG,CAAC,GAAGf,KAAJ,CAArB;MACAe,YAAY,CAACJ,KAAD,CAAZ,GAAsBD,WAAtB;MACAT,QAAQ,CAACc,YAAD,CAAR;IACD;EACF,CAVD;;EAYA,oBACE;IAAK,SAAS,EAAC,WAAf;IAAA,UACGf,KAAK,CAACgB,GAAN,CAAUH,IAAI,iBACb,QAAC,IAAD;MAEE,EAAE,EAAEA,IAAI,CAACC,EAFX;MAGE,KAAK,EAAED,IAAI,CAACI,KAHd;MAIE,UAAU,EAAEJ,IAAI,CAACK,UAJnB;MAKE,OAAO,EAAEL,IAAI,CAACM,OALhB;MAME,UAAU,EAAEV,cANd,CAM8B;;IAN9B,GACOI,IAAI,CAACC,EADZ;MAAA;MAAA;MAAA;IAAA,QADD;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAcD,CAjDD;;GAAMf,S;;KAAAA,S;AAmDN,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}