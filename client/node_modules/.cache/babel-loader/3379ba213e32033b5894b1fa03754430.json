{"ast":null,"code":"import { addWeeks } from \"./addWeeks.mjs\";\nimport { startOfWeek } from \"./startOfWeek.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n/**\n * The {@link eachWeekOfInterval} function options.\n */\n\n/**\n * @name eachWeekOfInterval\n * @category Interval Helpers\n * @summary Return the array of weeks within the specified time interval.\n *\n * @description\n * Return the array of weeks within the specified time interval.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param interval - The interval.\n * @param options - An object with options.\n *\n * @returns The array with starts of weeks from the week of the interval start to the week of the interval end\n *\n * @example\n * // Each week within interval 6 October 2014 - 23 November 2014:\n * const result = eachWeekOfInterval({\n *   start: new Date(2014, 9, 6),\n *   end: new Date(2014, 10, 23)\n * })\n * //=> [\n * //   Sun Oct 05 2014 00:00:00,\n * //   Sun Oct 12 2014 00:00:00,\n * //   Sun Oct 19 2014 00:00:00,\n * //   Sun Oct 26 2014 00:00:00,\n * //   Sun Nov 02 2014 00:00:00,\n * //   Sun Nov 09 2014 00:00:00,\n * //   Sun Nov 16 2014 00:00:00,\n * //   Sun Nov 23 2014 00:00:00\n * // ]\n */\n\nexport function eachWeekOfInterval(interval, options) {\n  const startDate = toDate(interval.start);\n  const endDate = toDate(interval.end);\n  let reversed = +startDate > +endDate;\n  const startDateWeek = reversed ? startOfWeek(endDate, options) : startOfWeek(startDate, options);\n  const endDateWeek = reversed ? startOfWeek(startDate, options) : startOfWeek(endDate, options); // Some timezones switch DST at midnight, making start of day unreliable in these timezones, 3pm is a safe bet\n\n  startDateWeek.setHours(15);\n  endDateWeek.setHours(15);\n  const endTime = +endDateWeek.getTime();\n  let currentDate = startDateWeek;\n  let step = options?.step ?? 1;\n  if (!step) return [];\n\n  if (step < 0) {\n    step = -step;\n    reversed = !reversed;\n  }\n\n  const dates = [];\n\n  while (+currentDate <= endTime) {\n    currentDate.setHours(0);\n    dates.push(toDate(currentDate));\n    currentDate = addWeeks(currentDate, step);\n    currentDate.setHours(15);\n  }\n\n  return reversed ? dates.reverse() : dates;\n} // Fallback for modularized imports:\n\nexport default eachWeekOfInterval;","map":{"version":3,"names":["addWeeks","startOfWeek","toDate","eachWeekOfInterval","interval","options","startDate","start","endDate","end","reversed","startDateWeek","endDateWeek","setHours","endTime","getTime","currentDate","step","dates","push","reverse"],"sources":["C:/Users/devon/OneDrive/Documents/GitHub/final-project-xPurification/client/node_modules/date-fns/eachWeekOfInterval.mjs"],"sourcesContent":["import { addWeeks } from \"./addWeeks.mjs\";\nimport { startOfWeek } from \"./startOfWeek.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * The {@link eachWeekOfInterval} function options.\n */\n\n/**\n * @name eachWeekOfInterval\n * @category Interval Helpers\n * @summary Return the array of weeks within the specified time interval.\n *\n * @description\n * Return the array of weeks within the specified time interval.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param interval - The interval.\n * @param options - An object with options.\n *\n * @returns The array with starts of weeks from the week of the interval start to the week of the interval end\n *\n * @example\n * // Each week within interval 6 October 2014 - 23 November 2014:\n * const result = eachWeekOfInterval({\n *   start: new Date(2014, 9, 6),\n *   end: new Date(2014, 10, 23)\n * })\n * //=> [\n * //   Sun Oct 05 2014 00:00:00,\n * //   Sun Oct 12 2014 00:00:00,\n * //   Sun Oct 19 2014 00:00:00,\n * //   Sun Oct 26 2014 00:00:00,\n * //   Sun Nov 02 2014 00:00:00,\n * //   Sun Nov 09 2014 00:00:00,\n * //   Sun Nov 16 2014 00:00:00,\n * //   Sun Nov 23 2014 00:00:00\n * // ]\n */\nexport function eachWeekOfInterval(interval, options) {\n  const startDate = toDate(interval.start);\n  const endDate = toDate(interval.end);\n\n  let reversed = +startDate > +endDate;\n  const startDateWeek = reversed\n    ? startOfWeek(endDate, options)\n    : startOfWeek(startDate, options);\n  const endDateWeek = reversed\n    ? startOfWeek(startDate, options)\n    : startOfWeek(endDate, options);\n\n  // Some timezones switch DST at midnight, making start of day unreliable in these timezones, 3pm is a safe bet\n  startDateWeek.setHours(15);\n  endDateWeek.setHours(15);\n\n  const endTime = +endDateWeek.getTime();\n  let currentDate = startDateWeek;\n\n  let step = options?.step ?? 1;\n  if (!step) return [];\n  if (step < 0) {\n    step = -step;\n    reversed = !reversed;\n  }\n\n  const dates = [];\n\n  while (+currentDate <= endTime) {\n    currentDate.setHours(0);\n    dates.push(toDate(currentDate));\n    currentDate = addWeeks(currentDate, step);\n    currentDate.setHours(15);\n  }\n\n  return reversed ? dates.reverse() : dates;\n}\n\n// Fallback for modularized imports:\nexport default eachWeekOfInterval;\n"],"mappings":"AAAA,SAASA,QAAT,QAAyB,gBAAzB;AACA,SAASC,WAAT,QAA4B,mBAA5B;AACA,SAASC,MAAT,QAAuB,cAAvB;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,kBAAT,CAA4BC,QAA5B,EAAsCC,OAAtC,EAA+C;EACpD,MAAMC,SAAS,GAAGJ,MAAM,CAACE,QAAQ,CAACG,KAAV,CAAxB;EACA,MAAMC,OAAO,GAAGN,MAAM,CAACE,QAAQ,CAACK,GAAV,CAAtB;EAEA,IAAIC,QAAQ,GAAG,CAACJ,SAAD,GAAa,CAACE,OAA7B;EACA,MAAMG,aAAa,GAAGD,QAAQ,GAC1BT,WAAW,CAACO,OAAD,EAAUH,OAAV,CADe,GAE1BJ,WAAW,CAACK,SAAD,EAAYD,OAAZ,CAFf;EAGA,MAAMO,WAAW,GAAGF,QAAQ,GACxBT,WAAW,CAACK,SAAD,EAAYD,OAAZ,CADa,GAExBJ,WAAW,CAACO,OAAD,EAAUH,OAAV,CAFf,CARoD,CAYpD;;EACAM,aAAa,CAACE,QAAd,CAAuB,EAAvB;EACAD,WAAW,CAACC,QAAZ,CAAqB,EAArB;EAEA,MAAMC,OAAO,GAAG,CAACF,WAAW,CAACG,OAAZ,EAAjB;EACA,IAAIC,WAAW,GAAGL,aAAlB;EAEA,IAAIM,IAAI,GAAGZ,OAAO,EAAEY,IAAT,IAAiB,CAA5B;EACA,IAAI,CAACA,IAAL,EAAW,OAAO,EAAP;;EACX,IAAIA,IAAI,GAAG,CAAX,EAAc;IACZA,IAAI,GAAG,CAACA,IAAR;IACAP,QAAQ,GAAG,CAACA,QAAZ;EACD;;EAED,MAAMQ,KAAK,GAAG,EAAd;;EAEA,OAAO,CAACF,WAAD,IAAgBF,OAAvB,EAAgC;IAC9BE,WAAW,CAACH,QAAZ,CAAqB,CAArB;IACAK,KAAK,CAACC,IAAN,CAAWjB,MAAM,CAACc,WAAD,CAAjB;IACAA,WAAW,GAAGhB,QAAQ,CAACgB,WAAD,EAAcC,IAAd,CAAtB;IACAD,WAAW,CAACH,QAAZ,CAAqB,EAArB;EACD;;EAED,OAAOH,QAAQ,GAAGQ,KAAK,CAACE,OAAN,EAAH,GAAqBF,KAApC;AACD,C,CAED;;AACA,eAAef,kBAAf"},"metadata":{},"sourceType":"module"}