{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\devon\\\\OneDrive\\\\Documents\\\\GitHub\\\\final-project-xPurification\\\\client\\\\src\\\\pages\\\\ReadPosts.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { supabase } from '../client';\nimport Card from '../components/Card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ReadPosts = () => {\n  _s();\n\n  const [posts, setPosts] = useState([]);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [sortBy, setSortBy] = useState(null);\n  useEffect(() => {\n    fetchPosts();\n  }, [searchQuery, sortBy]);\n\n  const fetchPosts = async () => {\n    let {\n      data,\n      error\n    } = await supabase.from('Posts').select('*');\n\n    if (error) {\n      console.error('Error fetching posts:', error.message);\n    } else {\n      // Filter posts based on search query\n      if (searchQuery.trim() !== '') {\n        data = data.filter(post => post.title.toLowerCase().includes(searchQuery.toLowerCase()));\n      } // Sort posts based on sortBy option\n\n\n      if (sortBy === 'created_at') {\n        data = data.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));\n      } else if (sortBy === 'upvotes') {\n        data = data.sort((a, b) => b.upvotes - a.upvotes);\n      }\n\n      setPosts(data);\n    }\n  };\n\n  const handleSearchChange = event => {\n    setSearchQuery(event.target.value);\n  };\n\n  const handleSortBy = sortByOption => {\n    setSortBy(sortByOption);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ReadPosts\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Search by title...\",\n      value: searchQuery,\n      onChange: handleSearchChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleSortBy('created_at'),\n        children: \"Sort by Created Time\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleSortBy('upvotes'),\n        children: \"Sort by Upvotes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), posts.length > 0 ? posts.map(post => /*#__PURE__*/_jsxDEV(Card, { ...post\n    }, post.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 37\n    }, this)) : /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"No Posts Found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ReadPosts, \"xxRfRTFzX5CW+U/f9KJ7CK8WKgY=\");\n\n_c = ReadPosts;\nexport default ReadPosts;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReadPosts\");","map":{"version":3,"names":["React","useState","useEffect","supabase","Card","ReadPosts","posts","setPosts","searchQuery","setSearchQuery","sortBy","setSortBy","fetchPosts","data","error","from","select","console","message","trim","filter","post","title","toLowerCase","includes","sort","a","b","Date","created_at","upvotes","handleSearchChange","event","target","value","handleSortBy","sortByOption","length","map","id"],"sources":["C:/Users/devon/OneDrive/Documents/GitHub/final-project-xPurification/client/src/pages/ReadPosts.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { supabase } from '../client';\nimport Card from '../components/Card';\n\nconst ReadPosts = () => {\n    const [posts, setPosts] = useState([]);\n    const [searchQuery, setSearchQuery] = useState('');\n    const [sortBy, setSortBy] = useState(null);\n\n    useEffect(() => {\n        fetchPosts();\n    }, [searchQuery, sortBy]);\n\n    const fetchPosts = async () => {\n        let { data, error } = await supabase.from('Posts').select('*');\n        if (error) {\n            console.error('Error fetching posts:', error.message);\n        } else {\n            // Filter posts based on search query\n            if (searchQuery.trim() !== '') {\n                data = data.filter(post =>\n                    post.title.toLowerCase().includes(searchQuery.toLowerCase())\n                );\n            }\n            // Sort posts based on sortBy option\n            if (sortBy === 'created_at') {\n                data = data.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));\n            } else if (sortBy === 'upvotes') {\n                data = data.sort((a, b) => b.upvotes - a.upvotes);\n            }\n            setPosts(data);\n        }\n    };\n\n    const handleSearchChange = (event) => {\n        setSearchQuery(event.target.value);\n    };\n\n    const handleSortBy = (sortByOption) => {\n        setSortBy(sortByOption);\n    };\n\n    return (\n        <div className=\"ReadPosts\">\n            <input\n                type=\"text\"\n                placeholder=\"Search by title...\"\n                value={searchQuery}\n                onChange={handleSearchChange}\n            />\n            <div>\n                <button onClick={() => handleSortBy('created_at')}>Sort by Created Time</button>\n                <button onClick={() => handleSortBy('upvotes')}>Sort by Upvotes</button>\n            </div>\n            {posts.length > 0 ? (\n                posts.map((post) => <Card key={post.id} {...post} />)\n            ) : (\n                <h2>No Posts Found</h2>\n            )}\n        </div>\n    );\n};\n\nexport default ReadPosts;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}