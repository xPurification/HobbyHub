{"ast":null,"code":"import { numericPatterns } from \"../constants.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { isLeapYearIndex, parseNDigits, parseNumericPattern } from \"../utils.mjs\";\nexport class DayOfYearParser extends Parser {\n  priority = 90;\n  subpriority = 1;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"D\":\n      case \"DD\":\n        return parseNumericPattern(numericPatterns.dayOfYear, dateString);\n\n      case \"Do\":\n        return match.ordinalNumber(dateString, {\n          unit: \"date\"\n        });\n\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(date, value) {\n    const year = date.getFullYear();\n    const isLeapYear = isLeapYearIndex(year);\n\n    if (isLeapYear) {\n      return value >= 1 && value <= 366;\n    } else {\n      return value >= 1 && value <= 365;\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setMonth(0, value);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"Y\", \"R\", \"q\", \"Q\", \"M\", \"L\", \"w\", \"I\", \"d\", \"E\", \"i\", \"e\", \"c\", \"t\", \"T\"];\n}","map":{"version":3,"names":["numericPatterns","Parser","isLeapYearIndex","parseNDigits","parseNumericPattern","DayOfYearParser","priority","subpriority","parse","dateString","token","match","dayOfYear","ordinalNumber","unit","length","validate","date","value","year","getFullYear","isLeapYear","set","_flags","setMonth","setHours","incompatibleTokens"],"sources":["C:/Users/devon/OneDrive/Documents/GitHub/final-project-xPurification/client/node_modules/date-fns/parse/_lib/parsers/DayOfYearParser.mjs"],"sourcesContent":["import { numericPatterns } from \"../constants.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport {\n  isLeapYearIndex,\n  parseNDigits,\n  parseNumericPattern,\n} from \"../utils.mjs\";\n\nexport class DayOfYearParser extends Parser {\n  priority = 90;\n\n  subpriority = 1;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"D\":\n      case \"DD\":\n        return parseNumericPattern(numericPatterns.dayOfYear, dateString);\n      case \"Do\":\n        return match.ordinalNumber(dateString, { unit: \"date\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(date, value) {\n    const year = date.getFullYear();\n    const isLeapYear = isLeapYearIndex(year);\n    if (isLeapYear) {\n      return value >= 1 && value <= 366;\n    } else {\n      return value >= 1 && value <= 365;\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setMonth(0, value);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"I\",\n    \"d\",\n    \"E\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n"],"mappings":"AAAA,SAASA,eAAT,QAAgC,kBAAhC;AACA,SAASC,MAAT,QAAuB,eAAvB;AACA,SACEC,eADF,EAEEC,YAFF,EAGEC,mBAHF,QAIO,cAJP;AAMA,OAAO,MAAMC,eAAN,SAA8BJ,MAA9B,CAAqC;EAC1CK,QAAQ,GAAG,EAAH;EAERC,WAAW,GAAG,CAAH;;EAEXC,KAAK,CAACC,UAAD,EAAaC,KAAb,EAAoBC,KAApB,EAA2B;IAC9B,QAAQD,KAAR;MACE,KAAK,GAAL;MACA,KAAK,IAAL;QACE,OAAON,mBAAmB,CAACJ,eAAe,CAACY,SAAjB,EAA4BH,UAA5B,CAA1B;;MACF,KAAK,IAAL;QACE,OAAOE,KAAK,CAACE,aAAN,CAAoBJ,UAApB,EAAgC;UAAEK,IAAI,EAAE;QAAR,CAAhC,CAAP;;MACF;QACE,OAAOX,YAAY,CAACO,KAAK,CAACK,MAAP,EAAeN,UAAf,CAAnB;IAPJ;EASD;;EAEDO,QAAQ,CAACC,IAAD,EAAOC,KAAP,EAAc;IACpB,MAAMC,IAAI,GAAGF,IAAI,CAACG,WAAL,EAAb;IACA,MAAMC,UAAU,GAAGnB,eAAe,CAACiB,IAAD,CAAlC;;IACA,IAAIE,UAAJ,EAAgB;MACd,OAAOH,KAAK,IAAI,CAAT,IAAcA,KAAK,IAAI,GAA9B;IACD,CAFD,MAEO;MACL,OAAOA,KAAK,IAAI,CAAT,IAAcA,KAAK,IAAI,GAA9B;IACD;EACF;;EAEDI,GAAG,CAACL,IAAD,EAAOM,MAAP,EAAeL,KAAf,EAAsB;IACvBD,IAAI,CAACO,QAAL,CAAc,CAAd,EAAiBN,KAAjB;IACAD,IAAI,CAACQ,QAAL,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB;IACA,OAAOR,IAAP;EACD;;EAEDS,kBAAkB,GAAG,CACnB,GADmB,EAEnB,GAFmB,EAGnB,GAHmB,EAInB,GAJmB,EAKnB,GALmB,EAMnB,GANmB,EAOnB,GAPmB,EAQnB,GARmB,EASnB,GATmB,EAUnB,GAVmB,EAWnB,GAXmB,EAYnB,GAZmB,EAanB,GAbmB,EAcnB,GAdmB,EAenB,GAfmB,CAAH;AAjCwB"},"metadata":{},"sourceType":"module"}