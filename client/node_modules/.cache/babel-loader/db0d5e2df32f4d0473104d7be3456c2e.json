{"ast":null,"code":"import { compareAsc } from \"./compareAsc.mjs\";\nimport { minutesInDay, minutesInMonth } from \"./constants.mjs\";\nimport { differenceInMonths } from \"./differenceInMonths.mjs\";\nimport { differenceInSeconds } from \"./differenceInSeconds.mjs\";\nimport { toDate } from \"./toDate.mjs\";\nimport { defaultLocale } from \"./_lib/defaultLocale.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\nimport { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.mjs\";\n/**\n * The {@link formatDistance} function options.\n */\n\n/**\n * @name formatDistance\n * @category Common Helpers\n * @summary Return the distance between the given dates in words.\n *\n * @description\n * Return the distance between the given dates in words.\n *\n * | Distance between dates                                            | Result              |\n * |-------------------------------------------------------------------|---------------------|\n * | 0 ... 30 secs                                                     | less than a minute  |\n * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\n * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\n * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\n * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\n * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\n * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\n * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\n * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\n * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\n * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\n * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\n * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\n * | N yrs ... N yrs 3 months                                          | about N years       |\n * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\n * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\n *\n * With `options.includeSeconds == true`:\n * | Distance between dates | Result               |\n * |------------------------|----------------------|\n * | 0 secs ... 5 secs      | less than 5 seconds  |\n * | 5 secs ... 10 secs     | less than 10 seconds |\n * | 10 secs ... 20 secs    | less than 20 seconds |\n * | 20 secs ... 40 secs    | half a minute        |\n * | 40 secs ... 60 secs    | less than a minute   |\n * | 60 secs ... 90 secs    | 1 minute             |\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date\n * @param baseDate - The date to compare with\n * @param options - An object with options\n *\n * @returns The distance in words\n *\n * @throws `date` must not be Invalid Date\n * @throws `baseDate` must not be Invalid Date\n * @throws `options.locale` must contain `formatDistance` property\n *\n * @example\n * // What is the distance between 2 July 2014 and 1 January 2015?\n * const result = formatDistance(new Date(2014, 6, 2), new Date(2015, 0, 1))\n * //=> '6 months'\n *\n * @example\n * // What is the distance between 1 January 2015 00:00:15\n * // and 1 January 2015 00:00:00, including seconds?\n * const result = formatDistance(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   new Date(2015, 0, 1, 0, 0, 0),\n *   { includeSeconds: true }\n * )\n * //=> 'less than 20 seconds'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, with a suffix?\n * const result = formatDistance(new Date(2015, 0, 1), new Date(2016, 0, 1), {\n *   addSuffix: true\n * })\n * //=> 'about 1 year ago'\n *\n * @example\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = formatDistance(new Date(2016, 7, 1), new Date(2015, 0, 1), {\n *   locale: eoLocale\n * })\n * //=> 'pli ol 1 jaro'\n */\n\nexport function formatDistance(date, baseDate, options) {\n  const defaultOptions = getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;\n  const minutesInAlmostTwoDays = 2520;\n  const comparison = compareAsc(date, baseDate);\n\n  if (isNaN(comparison)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  const localizeOptions = Object.assign({}, options, {\n    addSuffix: options?.addSuffix,\n    comparison: comparison\n  });\n  let dateLeft;\n  let dateRight;\n\n  if (comparison > 0) {\n    dateLeft = toDate(baseDate);\n    dateRight = toDate(date);\n  } else {\n    dateLeft = toDate(date);\n    dateRight = toDate(baseDate);\n  }\n\n  const seconds = differenceInSeconds(dateRight, dateLeft);\n  const offsetInSeconds = (getTimezoneOffsetInMilliseconds(dateRight) - getTimezoneOffsetInMilliseconds(dateLeft)) / 1000;\n  const minutes = Math.round((seconds - offsetInSeconds) / 60);\n  let months; // 0 up to 2 mins\n\n  if (minutes < 2) {\n    if (options?.includeSeconds) {\n      if (seconds < 5) {\n        return locale.formatDistance(\"lessThanXSeconds\", 5, localizeOptions);\n      } else if (seconds < 10) {\n        return locale.formatDistance(\"lessThanXSeconds\", 10, localizeOptions);\n      } else if (seconds < 20) {\n        return locale.formatDistance(\"lessThanXSeconds\", 20, localizeOptions);\n      } else if (seconds < 40) {\n        return locale.formatDistance(\"halfAMinute\", 0, localizeOptions);\n      } else if (seconds < 60) {\n        return locale.formatDistance(\"lessThanXMinutes\", 1, localizeOptions);\n      } else {\n        return locale.formatDistance(\"xMinutes\", 1, localizeOptions);\n      }\n    } else {\n      if (minutes === 0) {\n        return locale.formatDistance(\"lessThanXMinutes\", 1, localizeOptions);\n      } else {\n        return locale.formatDistance(\"xMinutes\", minutes, localizeOptions);\n      }\n    } // 2 mins up to 0.75 hrs\n\n  } else if (minutes < 45) {\n    return locale.formatDistance(\"xMinutes\", minutes, localizeOptions); // 0.75 hrs up to 1.5 hrs\n  } else if (minutes < 90) {\n    return locale.formatDistance(\"aboutXHours\", 1, localizeOptions); // 1.5 hrs up to 24 hrs\n  } else if (minutes < minutesInDay) {\n    const hours = Math.round(minutes / 60);\n    return locale.formatDistance(\"aboutXHours\", hours, localizeOptions); // 1 day up to 1.75 days\n  } else if (minutes < minutesInAlmostTwoDays) {\n    return locale.formatDistance(\"xDays\", 1, localizeOptions); // 1.75 days up to 30 days\n  } else if (minutes < minutesInMonth) {\n    const days = Math.round(minutes / minutesInDay);\n    return locale.formatDistance(\"xDays\", days, localizeOptions); // 1 month up to 2 months\n  } else if (minutes < minutesInMonth * 2) {\n    months = Math.round(minutes / minutesInMonth);\n    return locale.formatDistance(\"aboutXMonths\", months, localizeOptions);\n  }\n\n  months = differenceInMonths(dateRight, dateLeft); // 2 months up to 12 months\n\n  if (months < 12) {\n    const nearestMonth = Math.round(minutes / minutesInMonth);\n    return locale.formatDistance(\"xMonths\", nearestMonth, localizeOptions); // 1 year up to max Date\n  } else {\n    const monthsSinceStartOfYear = months % 12;\n    const years = Math.trunc(months / 12); // N years up to 1 years 3 months\n\n    if (monthsSinceStartOfYear < 3) {\n      return locale.formatDistance(\"aboutXYears\", years, localizeOptions); // N years 3 months up to N years 9 months\n    } else if (monthsSinceStartOfYear < 9) {\n      return locale.formatDistance(\"overXYears\", years, localizeOptions); // N years 9 months up to N year 12 months\n    } else {\n      return locale.formatDistance(\"almostXYears\", years + 1, localizeOptions);\n    }\n  }\n} // Fallback for modularized imports:\n\nexport default formatDistance;","map":{"version":3,"names":["compareAsc","minutesInDay","minutesInMonth","differenceInMonths","differenceInSeconds","toDate","defaultLocale","getDefaultOptions","getTimezoneOffsetInMilliseconds","formatDistance","date","baseDate","options","defaultOptions","locale","minutesInAlmostTwoDays","comparison","isNaN","RangeError","localizeOptions","Object","assign","addSuffix","dateLeft","dateRight","seconds","offsetInSeconds","minutes","Math","round","months","includeSeconds","hours","days","nearestMonth","monthsSinceStartOfYear","years","trunc"],"sources":["C:/Users/devon/OneDrive/Documents/GitHub/final-project-xPurification/client/node_modules/date-fns/formatDistance.mjs"],"sourcesContent":["import { compareAsc } from \"./compareAsc.mjs\";\nimport { minutesInDay, minutesInMonth } from \"./constants.mjs\";\nimport { differenceInMonths } from \"./differenceInMonths.mjs\";\nimport { differenceInSeconds } from \"./differenceInSeconds.mjs\";\nimport { toDate } from \"./toDate.mjs\";\nimport { defaultLocale } from \"./_lib/defaultLocale.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\nimport { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.mjs\";\n\n/**\n * The {@link formatDistance} function options.\n */\n\n/**\n * @name formatDistance\n * @category Common Helpers\n * @summary Return the distance between the given dates in words.\n *\n * @description\n * Return the distance between the given dates in words.\n *\n * | Distance between dates                                            | Result              |\n * |-------------------------------------------------------------------|---------------------|\n * | 0 ... 30 secs                                                     | less than a minute  |\n * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\n * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\n * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\n * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\n * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\n * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\n * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\n * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\n * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\n * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\n * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\n * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\n * | N yrs ... N yrs 3 months                                          | about N years       |\n * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\n * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\n *\n * With `options.includeSeconds == true`:\n * | Distance between dates | Result               |\n * |------------------------|----------------------|\n * | 0 secs ... 5 secs      | less than 5 seconds  |\n * | 5 secs ... 10 secs     | less than 10 seconds |\n * | 10 secs ... 20 secs    | less than 20 seconds |\n * | 20 secs ... 40 secs    | half a minute        |\n * | 40 secs ... 60 secs    | less than a minute   |\n * | 60 secs ... 90 secs    | 1 minute             |\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date\n * @param baseDate - The date to compare with\n * @param options - An object with options\n *\n * @returns The distance in words\n *\n * @throws `date` must not be Invalid Date\n * @throws `baseDate` must not be Invalid Date\n * @throws `options.locale` must contain `formatDistance` property\n *\n * @example\n * // What is the distance between 2 July 2014 and 1 January 2015?\n * const result = formatDistance(new Date(2014, 6, 2), new Date(2015, 0, 1))\n * //=> '6 months'\n *\n * @example\n * // What is the distance between 1 January 2015 00:00:15\n * // and 1 January 2015 00:00:00, including seconds?\n * const result = formatDistance(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   new Date(2015, 0, 1, 0, 0, 0),\n *   { includeSeconds: true }\n * )\n * //=> 'less than 20 seconds'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, with a suffix?\n * const result = formatDistance(new Date(2015, 0, 1), new Date(2016, 0, 1), {\n *   addSuffix: true\n * })\n * //=> 'about 1 year ago'\n *\n * @example\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = formatDistance(new Date(2016, 7, 1), new Date(2015, 0, 1), {\n *   locale: eoLocale\n * })\n * //=> 'pli ol 1 jaro'\n */\n\nexport function formatDistance(date, baseDate, options) {\n  const defaultOptions = getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;\n  const minutesInAlmostTwoDays = 2520;\n\n  const comparison = compareAsc(date, baseDate);\n\n  if (isNaN(comparison)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  const localizeOptions = Object.assign({}, options, {\n    addSuffix: options?.addSuffix,\n    comparison: comparison,\n  });\n\n  let dateLeft;\n  let dateRight;\n  if (comparison > 0) {\n    dateLeft = toDate(baseDate);\n    dateRight = toDate(date);\n  } else {\n    dateLeft = toDate(date);\n    dateRight = toDate(baseDate);\n  }\n\n  const seconds = differenceInSeconds(dateRight, dateLeft);\n  const offsetInSeconds =\n    (getTimezoneOffsetInMilliseconds(dateRight) -\n      getTimezoneOffsetInMilliseconds(dateLeft)) /\n    1000;\n  const minutes = Math.round((seconds - offsetInSeconds) / 60);\n  let months;\n\n  // 0 up to 2 mins\n  if (minutes < 2) {\n    if (options?.includeSeconds) {\n      if (seconds < 5) {\n        return locale.formatDistance(\"lessThanXSeconds\", 5, localizeOptions);\n      } else if (seconds < 10) {\n        return locale.formatDistance(\"lessThanXSeconds\", 10, localizeOptions);\n      } else if (seconds < 20) {\n        return locale.formatDistance(\"lessThanXSeconds\", 20, localizeOptions);\n      } else if (seconds < 40) {\n        return locale.formatDistance(\"halfAMinute\", 0, localizeOptions);\n      } else if (seconds < 60) {\n        return locale.formatDistance(\"lessThanXMinutes\", 1, localizeOptions);\n      } else {\n        return locale.formatDistance(\"xMinutes\", 1, localizeOptions);\n      }\n    } else {\n      if (minutes === 0) {\n        return locale.formatDistance(\"lessThanXMinutes\", 1, localizeOptions);\n      } else {\n        return locale.formatDistance(\"xMinutes\", minutes, localizeOptions);\n      }\n    }\n\n    // 2 mins up to 0.75 hrs\n  } else if (minutes < 45) {\n    return locale.formatDistance(\"xMinutes\", minutes, localizeOptions);\n\n    // 0.75 hrs up to 1.5 hrs\n  } else if (minutes < 90) {\n    return locale.formatDistance(\"aboutXHours\", 1, localizeOptions);\n\n    // 1.5 hrs up to 24 hrs\n  } else if (minutes < minutesInDay) {\n    const hours = Math.round(minutes / 60);\n    return locale.formatDistance(\"aboutXHours\", hours, localizeOptions);\n\n    // 1 day up to 1.75 days\n  } else if (minutes < minutesInAlmostTwoDays) {\n    return locale.formatDistance(\"xDays\", 1, localizeOptions);\n\n    // 1.75 days up to 30 days\n  } else if (minutes < minutesInMonth) {\n    const days = Math.round(minutes / minutesInDay);\n    return locale.formatDistance(\"xDays\", days, localizeOptions);\n\n    // 1 month up to 2 months\n  } else if (minutes < minutesInMonth * 2) {\n    months = Math.round(minutes / minutesInMonth);\n    return locale.formatDistance(\"aboutXMonths\", months, localizeOptions);\n  }\n\n  months = differenceInMonths(dateRight, dateLeft);\n\n  // 2 months up to 12 months\n  if (months < 12) {\n    const nearestMonth = Math.round(minutes / minutesInMonth);\n    return locale.formatDistance(\"xMonths\", nearestMonth, localizeOptions);\n\n    // 1 year up to max Date\n  } else {\n    const monthsSinceStartOfYear = months % 12;\n    const years = Math.trunc(months / 12);\n\n    // N years up to 1 years 3 months\n    if (monthsSinceStartOfYear < 3) {\n      return locale.formatDistance(\"aboutXYears\", years, localizeOptions);\n\n      // N years 3 months up to N years 9 months\n    } else if (monthsSinceStartOfYear < 9) {\n      return locale.formatDistance(\"overXYears\", years, localizeOptions);\n\n      // N years 9 months up to N year 12 months\n    } else {\n      return locale.formatDistance(\"almostXYears\", years + 1, localizeOptions);\n    }\n  }\n}\n\n// Fallback for modularized imports:\nexport default formatDistance;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}