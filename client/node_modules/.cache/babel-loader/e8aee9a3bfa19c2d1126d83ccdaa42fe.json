{"ast":null,"code":"import { compareAsc } from \"./compareAsc.mjs\";\nimport { differenceInCalendarMonths } from \"./differenceInCalendarMonths.mjs\";\nimport { isLastDayOfMonth } from \"./isLastDayOfMonth.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n/**\n * @name differenceInMonths\n * @category Month Helpers\n * @summary Get the number of full months between the given dates.\n *\n * @description\n * Get the number of full months between the given dates using trunc as a default rounding method.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n *\n * @returns The number of full months\n *\n * @example\n * // How many full months are between 31 January 2014 and 1 September 2014?\n * const result = differenceInMonths(new Date(2014, 8, 1), new Date(2014, 0, 31))\n * //=> 7\n */\n\nexport function differenceInMonths(dateLeft, dateRight) {\n  const _dateLeft = toDate(dateLeft);\n\n  const _dateRight = toDate(dateRight);\n\n  const sign = compareAsc(_dateLeft, _dateRight);\n  const difference = Math.abs(differenceInCalendarMonths(_dateLeft, _dateRight));\n  let result; // Check for the difference of less than month\n\n  if (difference < 1) {\n    result = 0;\n  } else {\n    if (_dateLeft.getMonth() === 1 && _dateLeft.getDate() > 27) {\n      // This will check if the date is end of Feb and assign a higher end of month date\n      // to compare it with Jan\n      _dateLeft.setDate(30);\n    }\n\n    _dateLeft.setMonth(_dateLeft.getMonth() - sign * difference); // Math.abs(diff in full months - diff in calendar months) === 1 if last calendar month is not full\n    // If so, result must be decreased by 1 in absolute value\n\n\n    let isLastMonthNotFull = compareAsc(_dateLeft, _dateRight) === -sign; // Check for cases of one full calendar month\n\n    if (isLastDayOfMonth(toDate(dateLeft)) && difference === 1 && compareAsc(dateLeft, _dateRight) === 1) {\n      isLastMonthNotFull = false;\n    }\n\n    result = sign * (difference - Number(isLastMonthNotFull));\n  } // Prevent negative zero\n\n\n  return result === 0 ? 0 : result;\n} // Fallback for modularized imports:\n\nexport default differenceInMonths;","map":{"version":3,"names":["compareAsc","differenceInCalendarMonths","isLastDayOfMonth","toDate","differenceInMonths","dateLeft","dateRight","_dateLeft","_dateRight","sign","difference","Math","abs","result","getMonth","getDate","setDate","setMonth","isLastMonthNotFull","Number"],"sources":["C:/Users/devon/OneDrive/Documents/GitHub/final-project-xPurification/client/node_modules/date-fns/differenceInMonths.mjs"],"sourcesContent":["import { compareAsc } from \"./compareAsc.mjs\";\nimport { differenceInCalendarMonths } from \"./differenceInCalendarMonths.mjs\";\nimport { isLastDayOfMonth } from \"./isLastDayOfMonth.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name differenceInMonths\n * @category Month Helpers\n * @summary Get the number of full months between the given dates.\n *\n * @description\n * Get the number of full months between the given dates using trunc as a default rounding method.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n *\n * @returns The number of full months\n *\n * @example\n * // How many full months are between 31 January 2014 and 1 September 2014?\n * const result = differenceInMonths(new Date(2014, 8, 1), new Date(2014, 0, 31))\n * //=> 7\n */\nexport function differenceInMonths(dateLeft, dateRight) {\n  const _dateLeft = toDate(dateLeft);\n  const _dateRight = toDate(dateRight);\n\n  const sign = compareAsc(_dateLeft, _dateRight);\n  const difference = Math.abs(\n    differenceInCalendarMonths(_dateLeft, _dateRight),\n  );\n  let result;\n\n  // Check for the difference of less than month\n  if (difference < 1) {\n    result = 0;\n  } else {\n    if (_dateLeft.getMonth() === 1 && _dateLeft.getDate() > 27) {\n      // This will check if the date is end of Feb and assign a higher end of month date\n      // to compare it with Jan\n      _dateLeft.setDate(30);\n    }\n\n    _dateLeft.setMonth(_dateLeft.getMonth() - sign * difference);\n\n    // Math.abs(diff in full months - diff in calendar months) === 1 if last calendar month is not full\n    // If so, result must be decreased by 1 in absolute value\n    let isLastMonthNotFull = compareAsc(_dateLeft, _dateRight) === -sign;\n\n    // Check for cases of one full calendar month\n    if (\n      isLastDayOfMonth(toDate(dateLeft)) &&\n      difference === 1 &&\n      compareAsc(dateLeft, _dateRight) === 1\n    ) {\n      isLastMonthNotFull = false;\n    }\n\n    result = sign * (difference - Number(isLastMonthNotFull));\n  }\n\n  // Prevent negative zero\n  return result === 0 ? 0 : result;\n}\n\n// Fallback for modularized imports:\nexport default differenceInMonths;\n"],"mappings":"AAAA,SAASA,UAAT,QAA2B,kBAA3B;AACA,SAASC,0BAAT,QAA2C,kCAA3C;AACA,SAASC,gBAAT,QAAiC,wBAAjC;AACA,SAASC,MAAT,QAAuB,cAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,kBAAT,CAA4BC,QAA5B,EAAsCC,SAAtC,EAAiD;EACtD,MAAMC,SAAS,GAAGJ,MAAM,CAACE,QAAD,CAAxB;;EACA,MAAMG,UAAU,GAAGL,MAAM,CAACG,SAAD,CAAzB;;EAEA,MAAMG,IAAI,GAAGT,UAAU,CAACO,SAAD,EAAYC,UAAZ,CAAvB;EACA,MAAME,UAAU,GAAGC,IAAI,CAACC,GAAL,CACjBX,0BAA0B,CAACM,SAAD,EAAYC,UAAZ,CADT,CAAnB;EAGA,IAAIK,MAAJ,CARsD,CAUtD;;EACA,IAAIH,UAAU,GAAG,CAAjB,EAAoB;IAClBG,MAAM,GAAG,CAAT;EACD,CAFD,MAEO;IACL,IAAIN,SAAS,CAACO,QAAV,OAAyB,CAAzB,IAA8BP,SAAS,CAACQ,OAAV,KAAsB,EAAxD,EAA4D;MAC1D;MACA;MACAR,SAAS,CAACS,OAAV,CAAkB,EAAlB;IACD;;IAEDT,SAAS,CAACU,QAAV,CAAmBV,SAAS,CAACO,QAAV,KAAuBL,IAAI,GAAGC,UAAjD,EAPK,CASL;IACA;;;IACA,IAAIQ,kBAAkB,GAAGlB,UAAU,CAACO,SAAD,EAAYC,UAAZ,CAAV,KAAsC,CAACC,IAAhE,CAXK,CAaL;;IACA,IACEP,gBAAgB,CAACC,MAAM,CAACE,QAAD,CAAP,CAAhB,IACAK,UAAU,KAAK,CADf,IAEAV,UAAU,CAACK,QAAD,EAAWG,UAAX,CAAV,KAAqC,CAHvC,EAIE;MACAU,kBAAkB,GAAG,KAArB;IACD;;IAEDL,MAAM,GAAGJ,IAAI,IAAIC,UAAU,GAAGS,MAAM,CAACD,kBAAD,CAAvB,CAAb;EACD,CApCqD,CAsCtD;;;EACA,OAAOL,MAAM,KAAK,CAAX,GAAe,CAAf,GAAmBA,MAA1B;AACD,C,CAED;;AACA,eAAeT,kBAAf"},"metadata":{},"sourceType":"module"}