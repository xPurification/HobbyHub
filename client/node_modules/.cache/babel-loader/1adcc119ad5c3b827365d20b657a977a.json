{"ast":null,"code":"import { addWeeks } from \"./addWeeks.mjs\";\nimport { millisecondsInWeek } from \"./constants.mjs\";\nimport { startOfISOWeekYear } from \"./startOfISOWeekYear.mjs\";\n/**\n * @name getISOWeeksInYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Get the number of weeks in an ISO week-numbering year of the given date.\n *\n * @description\n * Get the number of weeks in an ISO week-numbering year of the given date.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n *\n * @returns The number of ISO weeks in a year\n *\n * @example\n * // How many weeks are in ISO week-numbering year 2015?\n * const result = getISOWeeksInYear(new Date(2015, 1, 11))\n * //=> 53\n */\n\nexport function getISOWeeksInYear(date) {\n  const thisYear = startOfISOWeekYear(date);\n  const nextYear = startOfISOWeekYear(addWeeks(thisYear, 60));\n  const diff = +nextYear - +thisYear; // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n\n  return Math.round(diff / millisecondsInWeek);\n} // Fallback for modularized imports:\n\nexport default getISOWeeksInYear;","map":{"version":3,"names":["addWeeks","millisecondsInWeek","startOfISOWeekYear","getISOWeeksInYear","date","thisYear","nextYear","diff","Math","round"],"sources":["C:/Users/devon/OneDrive/Documents/GitHub/final-project-xPurification/client/node_modules/date-fns/getISOWeeksInYear.mjs"],"sourcesContent":["import { addWeeks } from \"./addWeeks.mjs\";\nimport { millisecondsInWeek } from \"./constants.mjs\";\nimport { startOfISOWeekYear } from \"./startOfISOWeekYear.mjs\";\n\n/**\n * @name getISOWeeksInYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Get the number of weeks in an ISO week-numbering year of the given date.\n *\n * @description\n * Get the number of weeks in an ISO week-numbering year of the given date.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n *\n * @returns The number of ISO weeks in a year\n *\n * @example\n * // How many weeks are in ISO week-numbering year 2015?\n * const result = getISOWeeksInYear(new Date(2015, 1, 11))\n * //=> 53\n */\nexport function getISOWeeksInYear(date) {\n  const thisYear = startOfISOWeekYear(date);\n  const nextYear = startOfISOWeekYear(addWeeks(thisYear, 60));\n  const diff = +nextYear - +thisYear;\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(diff / millisecondsInWeek);\n}\n\n// Fallback for modularized imports:\nexport default getISOWeeksInYear;\n"],"mappings":"AAAA,SAASA,QAAT,QAAyB,gBAAzB;AACA,SAASC,kBAAT,QAAmC,iBAAnC;AACA,SAASC,kBAAT,QAAmC,0BAAnC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,iBAAT,CAA2BC,IAA3B,EAAiC;EACtC,MAAMC,QAAQ,GAAGH,kBAAkB,CAACE,IAAD,CAAnC;EACA,MAAME,QAAQ,GAAGJ,kBAAkB,CAACF,QAAQ,CAACK,QAAD,EAAW,EAAX,CAAT,CAAnC;EACA,MAAME,IAAI,GAAG,CAACD,QAAD,GAAY,CAACD,QAA1B,CAHsC,CAKtC;EACA;EACA;;EACA,OAAOG,IAAI,CAACC,KAAL,CAAWF,IAAI,GAAGN,kBAAlB,CAAP;AACD,C,CAED;;AACA,eAAeE,iBAAf"},"metadata":{},"sourceType":"module"}