[{"C:\\Users\\devon\\OneDrive\\Documents\\GitHub\\lab7-xPurification\\client\\src\\index.js":"1","C:\\Users\\devon\\OneDrive\\Documents\\GitHub\\lab7-xPurification\\client\\src\\App.js":"2","C:\\Users\\devon\\OneDrive\\Documents\\GitHub\\lab7-xPurification\\client\\src\\pages\\CreatePost.js":"3","C:\\Users\\devon\\OneDrive\\Documents\\GitHub\\lab7-xPurification\\client\\src\\pages\\ReadPosts.js":"4","C:\\Users\\devon\\OneDrive\\Documents\\GitHub\\lab7-xPurification\\client\\src\\pages\\EditPost.js":"5","C:\\Users\\devon\\OneDrive\\Documents\\GitHub\\lab7-xPurification\\client\\src\\components\\Card.js":"6","C:\\Users\\devon\\OneDrive\\Documents\\GitHub\\lab7-xPurification\\client\\src\\client.js":"7","C:\\Users\\devon\\OneDrive\\Documents\\GitHub\\final-project-xPurification\\client\\src\\index.js":"8","C:\\Users\\devon\\OneDrive\\Documents\\GitHub\\final-project-xPurification\\client\\src\\App.js":"9","C:\\Users\\devon\\OneDrive\\Documents\\GitHub\\final-project-xPurification\\client\\src\\pages\\CreatePost.js":"10","C:\\Users\\devon\\OneDrive\\Documents\\GitHub\\final-project-xPurification\\client\\src\\pages\\ReadPosts.js":"11","C:\\Users\\devon\\OneDrive\\Documents\\GitHub\\final-project-xPurification\\client\\src\\pages\\EditPost.js":"12","C:\\Users\\devon\\OneDrive\\Documents\\GitHub\\final-project-xPurification\\client\\src\\client.js":"13","C:\\Users\\devon\\OneDrive\\Documents\\GitHub\\final-project-xPurification\\client\\src\\components\\Card.js":"14","C:\\Users\\devon\\OneDrive\\Documents\\GitHub\\final-project-xPurification\\client\\src\\pages\\ViewPost.js":"15","C:\\Users\\devon\\OneDrive\\Documents\\GitHub\\HobbyHub\\client\\src\\index.js":"16","C:\\Users\\devon\\OneDrive\\Documents\\GitHub\\HobbyHub\\client\\src\\App.js":"17","C:\\Users\\devon\\OneDrive\\Documents\\GitHub\\HobbyHub\\client\\src\\pages\\CreatePost.js":"18","C:\\Users\\devon\\OneDrive\\Documents\\GitHub\\HobbyHub\\client\\src\\pages\\ViewPost.js":"19","C:\\Users\\devon\\OneDrive\\Documents\\GitHub\\HobbyHub\\client\\src\\pages\\EditPost.js":"20","C:\\Users\\devon\\OneDrive\\Documents\\GitHub\\HobbyHub\\client\\src\\pages\\ReadPosts.js":"21","C:\\Users\\devon\\OneDrive\\Documents\\GitHub\\HobbyHub\\client\\src\\client.js":"22","C:\\Users\\devon\\OneDrive\\Documents\\GitHub\\HobbyHub\\client\\src\\components\\Card.js":"23"},{"size":347,"mtime":1712683571758,"results":"24","hashOfConfig":"25"},{"size":1784,"mtime":1712683571654,"results":"26","hashOfConfig":"25"},{"size":1479,"mtime":1712688175497,"results":"27","hashOfConfig":"25"},{"size":942,"mtime":1712686345653,"results":"28","hashOfConfig":"25"},{"size":1998,"mtime":1712687242293,"results":"29","hashOfConfig":"25"},{"size":1195,"mtime":1712687379767,"results":"30","hashOfConfig":"25"},{"size":399,"mtime":1712685552604,"results":"31","hashOfConfig":"25"},{"size":312,"mtime":1714263676550,"results":"32","hashOfConfig":"33"},{"size":1065,"mtime":1714282677536,"results":"34","hashOfConfig":"33"},{"size":2044,"mtime":1714273081784,"results":"35","hashOfConfig":"33"},{"size":3353,"mtime":1714281122580,"results":"36","hashOfConfig":"33"},{"size":2049,"mtime":1714286885476,"results":"37","hashOfConfig":"33"},{"size":399,"mtime":1712685552604,"results":"38","hashOfConfig":"33"},{"size":547,"mtime":1714283180306,"results":"39","hashOfConfig":"33"},{"size":7016,"mtime":1714285385579,"results":"40","hashOfConfig":"33"},{"size":312,"mtime":1714263676550,"results":"41","hashOfConfig":"42"},{"size":1065,"mtime":1714282677536,"results":"43","hashOfConfig":"42"},{"size":2044,"mtime":1714273081784,"results":"44","hashOfConfig":"42"},{"size":7016,"mtime":1714285385579,"results":"45","hashOfConfig":"42"},{"size":2039,"mtime":1714291820107,"results":"46","hashOfConfig":"42"},{"size":3353,"mtime":1742243458821,"results":"47","hashOfConfig":"42"},{"size":399,"mtime":1742242546279,"results":"48","hashOfConfig":"42"},{"size":547,"mtime":1714283180306,"results":"49","hashOfConfig":"42"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},"1we3nw8",{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},"nbjrlr",{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"5czgxo",{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109"},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116"},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\devon\\OneDrive\\Documents\\GitHub\\lab7-xPurification\\client\\src\\index.js",[],[],[],"C:\\Users\\devon\\OneDrive\\Documents\\GitHub\\lab7-xPurification\\client\\src\\App.js",[],[],"C:\\Users\\devon\\OneDrive\\Documents\\GitHub\\lab7-xPurification\\client\\src\\pages\\CreatePost.js",[],[],"C:\\Users\\devon\\OneDrive\\Documents\\GitHub\\lab7-xPurification\\client\\src\\pages\\ReadPosts.js",[],[],"C:\\Users\\devon\\OneDrive\\Documents\\GitHub\\lab7-xPurification\\client\\src\\pages\\EditPost.js",[],[],"C:\\Users\\devon\\OneDrive\\Documents\\GitHub\\lab7-xPurification\\client\\src\\components\\Card.js",[],[],"C:\\Users\\devon\\OneDrive\\Documents\\GitHub\\lab7-xPurification\\client\\src\\client.js",[],[],"C:\\Users\\devon\\OneDrive\\Documents\\GitHub\\final-project-xPurification\\client\\src\\index.js",[],[],[],"C:\\Users\\devon\\OneDrive\\Documents\\GitHub\\final-project-xPurification\\client\\src\\App.js",[],[],"C:\\Users\\devon\\OneDrive\\Documents\\GitHub\\final-project-xPurification\\client\\src\\pages\\CreatePost.js",[],[],"C:\\Users\\devon\\OneDrive\\Documents\\GitHub\\final-project-xPurification\\client\\src\\pages\\ReadPosts.js",["123"],[],"C:\\Users\\devon\\OneDrive\\Documents\\GitHub\\final-project-xPurification\\client\\src\\pages\\EditPost.js",[],[],"C:\\Users\\devon\\OneDrive\\Documents\\GitHub\\final-project-xPurification\\client\\src\\client.js",[],[],"C:\\Users\\devon\\OneDrive\\Documents\\GitHub\\final-project-xPurification\\client\\src\\components\\Card.js",[],[],"C:\\Users\\devon\\OneDrive\\Documents\\GitHub\\final-project-xPurification\\client\\src\\pages\\ViewPost.js",["124"],[],"C:\\Users\\devon\\OneDrive\\Documents\\GitHub\\HobbyHub\\client\\src\\index.js",[],[],"C:\\Users\\devon\\OneDrive\\Documents\\GitHub\\HobbyHub\\client\\src\\App.js",[],[],"C:\\Users\\devon\\OneDrive\\Documents\\GitHub\\HobbyHub\\client\\src\\pages\\CreatePost.js",[],[],"C:\\Users\\devon\\OneDrive\\Documents\\GitHub\\HobbyHub\\client\\src\\pages\\ViewPost.js",["125"],[],"import './ViewPost.css';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport { supabase } from '../client';\r\n\r\nconst ViewPost = () => {\r\n    const { id } = useParams();\r\n    const [post, setPost] = useState(null);\r\n    const [comments, setComments] = useState([]);\r\n    const [newComment, setNewComment] = useState('');\r\n\r\n    useEffect(() => {\r\n        fetchPost();\r\n        fetchComments();\r\n    }, []);\r\n\r\n    const fetchPost = async () => {\r\n        const { data, error } = await supabase\r\n            .from('Posts')\r\n            .select('*')\r\n            .eq('id', id)\r\n            .single();\r\n\r\n        if (error) {\r\n            console.error('Error fetching post:', error.message);\r\n        } else {\r\n            // Calculate relative time\r\n            const createdTimeAgo = calculateTimeAgo(data.created_at);\r\n            // Update post with relative time\r\n            setPost({ ...data, created_at: createdTimeAgo });\r\n        }\r\n    };\r\n\r\n    const calculateTimeAgo = (timestamp) => {\r\n        const now = new Date();\r\n        const createdAt = new Date(timestamp);\r\n        const diff = now - createdAt;\r\n        const seconds = Math.floor(diff / 1000);\r\n        const minutes = Math.floor(seconds / 60);\r\n        const hours = Math.floor(minutes / 60);\r\n        const days = Math.floor(hours / 24);\r\n        const weeks = Math.floor(days / 7);\r\n        const months = Math.floor(days / 30);\r\n        if (months > 0) {\r\n            return `${months} month${months > 1 ? 's' : ''} ago`;\r\n        } else if (weeks > 0) {\r\n            return `${weeks} week${weeks > 1 ? 's' : ''} ago`;\r\n        } else if (days > 0) {\r\n            return `${days} day${days > 1 ? 's' : ''} ago`;\r\n        } else if (hours > 0) {\r\n            return `${hours} hour${hours > 1 ? 's' : ''} ago`;\r\n        } else if (minutes > 0) {\r\n            return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;\r\n        } else {\r\n            return `${seconds} second${seconds > 1 ? 's' : ''} ago`;\r\n        }\r\n    };\r\n\r\n    const fetchComments = async () => {\r\n        try {\r\n            const { data, error } = await supabase\r\n                .from('Posts')\r\n                .select('comments')\r\n                .eq('id', id)\r\n                .single();\r\n\r\n            if (error) {\r\n                console.error('Error fetching comments:', error.message);\r\n            } else {\r\n                // Ensure comments data is an array\r\n                let commentsArray = [];\r\n                if (typeof data.comments === 'string') {\r\n                    // Parse the string to convert it into an array\r\n                    commentsArray = JSON.parse(data.comments);\r\n                } else if (Array.isArray(data.comments)) {\r\n                    // If already an array, use it directly\r\n                    commentsArray = data.comments;\r\n                } else {\r\n                    console.error('Comments data is not an array:', data.comments);\r\n                }\r\n\r\n                // Set the comments state\r\n                setComments(commentsArray);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error fetching comments:', error.message);\r\n        }\r\n    };\r\n\r\n    const handleChange = (event) => {\r\n        setNewComment(event.target.value);\r\n    };\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n\r\n        if (!newComment.trim()) return;\r\n\r\n        // Combine new comment with existing comments\r\n        const updatedComments = [...comments, newComment];\r\n\r\n        await supabase.from('Posts').update({ comments: updatedComments }).eq('id', id);\r\n\r\n        setComments(updatedComments);\r\n        setNewComment('');\r\n    };\r\n\r\n    const handleUpvote = async () => {\r\n        try {\r\n            // Increment the upvotes count by one\r\n            const updatedUpvotes = post.upvotes + 1;\r\n\r\n            // Update the upvotes count in the database\r\n            await supabase.from('Posts').update({ upvotes: updatedUpvotes }).eq('id', id);\r\n\r\n            // Update the local state with the new upvotes count\r\n            setPost(prevPost => ({ ...prevPost, upvotes: updatedUpvotes }));\r\n        } catch (error) {\r\n            console.error('Error upvoting post:', error.message);\r\n        }\r\n    };\r\n\r\n    const deletePost = async () => {\r\n        try {\r\n            // Delete the post from the database\r\n            await supabase.from('Posts').delete().eq('id', id);\r\n            // Redirect the user to the home page or another appropriate page\r\n            // Here, we'll just navigate back to the home page\r\n            window.location.href = '/';\r\n        } catch (error) {\r\n            console.error('Error deleting post:', error.message);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"ViewPost\">\r\n            {post ? (\r\n                <div>\r\n                    <p className=\"created_at\">Created {post.created_at}</p>\r\n                    <h1>{post.title}</h1>\r\n                    <p>{post.content}</p>\r\n                    {post.imageURL && (\r\n                        <div className=\"postImageContainer\">\r\n                            <img src={post.imageURL} alt=\"Post\" className=\"postImage\" />\r\n                        </div>\r\n                    )}\r\n                    <div className=\"postDetails\">\r\n                        <button className=\"upvoteButton\" onClick={handleUpvote}>👍{post.upvotes} upvotes</button>\r\n                        <div>\r\n                            <Link to={`/edit/${id}`} className=\"editDeleteButtons\">✏️</Link>\r\n                            <button className=\"editDeleteButtons\" onClick={deletePost}>🗑️</button>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div>\r\n                        {comments.length > 0 ? (\r\n                            <div>\r\n                                <h2>Comments:</h2>\r\n                                <ul>\r\n                                    {comments.map((comment, index) => (\r\n                                        <li key={index} className=\"comment\">{comment}</li>\r\n                                    ))}\r\n                                </ul>\r\n                            </div>\r\n                        ) : (\r\n                            <p>No comments yet.</p>\r\n                        )}\r\n                    </div>\r\n\r\n                    <form onSubmit={handleSubmit}>\r\n                        <textarea\r\n                            rows=\"3\"\r\n                            cols=\"50\"\r\n                            value={newComment}\r\n                            onChange={handleChange}\r\n                            placeholder=\"Add a comment...\"\r\n                        ></textarea>\r\n                        <br />\r\n                        <button type=\"submit\">Submit Comment</button>\r\n                    </form>\r\n                </div>\r\n            ) : (\r\n                <p>Loading...</p>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ViewPost;","C:\\Users\\devon\\OneDrive\\Documents\\GitHub\\HobbyHub\\client\\src\\pages\\EditPost.js",[],[],"C:\\Users\\devon\\OneDrive\\Documents\\GitHub\\HobbyHub\\client\\src\\pages\\ReadPosts.js",["126"],[],"import React, { useState, useEffect } from 'react';\nimport { supabase } from '../client';\nimport Card from '../components/Card';\n\nconst ReadPosts = () => {\n    const [posts, setPosts] = useState([]);\n    const [searchQuery, setSearchQuery] = useState('');\n    const [sortBy, setSortBy] = useState(null);\n\n    useEffect(() => {\n        fetchPosts();\n    }, [searchQuery, sortBy]);\n\n    const fetchPosts = async () => {\n        let { data, error } = await supabase.from('Posts').select('*');\n        if (error) {\n            console.error('Error fetching posts:', error.message);\n        } else {\n            // Filter posts based on search query\n            if (searchQuery.trim() !== '') {\n                data = data.filter(post =>\n                    post.title.toLowerCase().includes(searchQuery.toLowerCase())\n                );\n            }\n            // Sort posts based on sortBy option\n            if (sortBy === 'created_at') {\n                data = data.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));\n            } else if (sortBy === 'upvotes') {\n                data = data.sort((a, b) => b.upvotes - a.upvotes);\n            }\n            // Format the created_at timestamps\n            data = data.map(post => ({\n                ...post,\n                created_at: formatTimestamp(post.created_at)\n            }));\n            setPosts(data);\n        }\n    };\n\n    const formatTimestamp = (timestamp) => {\n        const now = new Date();\n        const createdAt = new Date(timestamp);\n        const diff = now.getTime() - createdAt.getTime(); // Difference in milliseconds\n        const seconds = Math.floor(diff / 1000);\n        const minutes = Math.floor(seconds / 60);\n        const hours = Math.floor(minutes / 60);\n        const days = Math.floor(hours / 24);\n        const weeks = Math.floor(days / 7);\n        const months = Math.floor(days / 30);\n        if (months > 0) {\n            return `${months} month${months > 1 ? 's' : ''} ago`;\n        } else if (weeks > 0) {\n            return `${weeks} week${weeks > 1 ? 's' : ''} ago`;\n        } else if (days > 0) {\n            return `${days} day${days > 1 ? 's' : ''} ago`;\n        } else if (hours > 0) {\n            return `${hours} hour${hours > 1 ? 's' : ''} ago`;\n        } else if (minutes > 0) {\n            return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;\n        } else {\n            return `${seconds} second${seconds > 1 ? 's' : ''} ago`;\n        }\n    };\n    const handleSearchChange = (event) => {\n        setSearchQuery(event.target.value);\n    };\n\n    const handleSortBy = (sortByOption) => {\n        setSortBy(sortByOption);\n    };\n\n    return (\n        <div className=\"ReadPosts\">\n            <input\n                type=\"text\"\n                placeholder=\"Search...\"\n                value={searchQuery}\n                onChange={handleSearchChange}\n            />\n            <div>\n                <p>Order by: </p>\n                <button onClick={() => handleSortBy('created_at')}>Newest</button>\n                <button onClick={() => handleSortBy('upvotes')}>Most Popular</button>\n            </div>\n            {posts.length > 0 ? (\n                posts.map((post) => <Card key={post.id} {...post} />)\n            ) : (\n                <h2>No Posts Found</h2>\n            )}\n        </div>\n    );\n};\n\nexport default ReadPosts;\n","C:\\Users\\devon\\OneDrive\\Documents\\GitHub\\HobbyHub\\client\\src\\client.js",[],[],"C:\\Users\\devon\\OneDrive\\Documents\\GitHub\\HobbyHub\\client\\src\\components\\Card.js",[],[],{"ruleId":"127","severity":1,"message":"128","line":12,"column":8,"nodeType":"129","endLine":12,"endColumn":29,"suggestions":"130"},{"ruleId":"127","severity":1,"message":"131","line":15,"column":8,"nodeType":"129","endLine":15,"endColumn":10,"suggestions":"132"},{"ruleId":"127","severity":1,"message":"131","line":15,"column":8,"nodeType":"129","endLine":15,"endColumn":10,"suggestions":"133"},{"ruleId":"127","severity":1,"message":"128","line":12,"column":8,"nodeType":"129","endLine":12,"endColumn":29,"suggestions":"134"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchPosts'. Either include it or remove the dependency array.","ArrayExpression",["135"],"React Hook useEffect has missing dependencies: 'fetchComments' and 'fetchPost'. Either include them or remove the dependency array.",["136"],["137"],["138"],{"desc":"139","fix":"140"},{"desc":"141","fix":"142"},{"desc":"141","fix":"143"},{"desc":"139","fix":"144"},"Update the dependencies array to be: [fetchPosts, searchQuery, sortBy]",{"range":"145","text":"146"},"Update the dependencies array to be: [fetchComments, fetchPost]",{"range":"147","text":"148"},{"range":"149","text":"148"},{"range":"150","text":"146"},[356,377],"[fetchPosts, searchQuery, sortBy]",[463,465],"[fetchComments, fetchPost]",[463,465],[356,377]]